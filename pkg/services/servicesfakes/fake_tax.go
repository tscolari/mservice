// Code generated by counterfeiter. DO NOT EDIT.
package servicesfakes

import (
	"context"
	"sync"

	"github.com/tscolari/mservice/pkg/services"
)

type FakeTax struct {
	AddStub        func(context.Context, float64) (float64, error)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 context.Context
		arg2 float64
	}
	addReturns struct {
		result1 float64
		result2 error
	}
	addReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	SubStub        func(context.Context, float64) (float64, error)
	subMutex       sync.RWMutex
	subArgsForCall []struct {
		arg1 context.Context
		arg2 float64
	}
	subReturns struct {
		result1 float64
		result2 error
	}
	subReturnsOnCall map[int]struct {
		result1 float64
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTax) Add(arg1 context.Context, arg2 float64) (float64, error) {
	fake.addMutex.Lock()
	ret, specificReturn := fake.addReturnsOnCall[len(fake.addArgsForCall)]
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 context.Context
		arg2 float64
	}{arg1, arg2})
	fake.recordInvocation("Add", []interface{}{arg1, arg2})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		return fake.AddStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.addReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTax) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeTax) AddCalls(stub func(context.Context, float64) (float64, error)) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = stub
}

func (fake *FakeTax) AddArgsForCall(i int) (context.Context, float64) {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	argsForCall := fake.addArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTax) AddReturns(result1 float64, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	fake.addReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeTax) AddReturnsOnCall(i int, result1 float64, result2 error) {
	fake.addMutex.Lock()
	defer fake.addMutex.Unlock()
	fake.AddStub = nil
	if fake.addReturnsOnCall == nil {
		fake.addReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.addReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeTax) Sub(arg1 context.Context, arg2 float64) (float64, error) {
	fake.subMutex.Lock()
	ret, specificReturn := fake.subReturnsOnCall[len(fake.subArgsForCall)]
	fake.subArgsForCall = append(fake.subArgsForCall, struct {
		arg1 context.Context
		arg2 float64
	}{arg1, arg2})
	fake.recordInvocation("Sub", []interface{}{arg1, arg2})
	fake.subMutex.Unlock()
	if fake.SubStub != nil {
		return fake.SubStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.subReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTax) SubCallCount() int {
	fake.subMutex.RLock()
	defer fake.subMutex.RUnlock()
	return len(fake.subArgsForCall)
}

func (fake *FakeTax) SubCalls(stub func(context.Context, float64) (float64, error)) {
	fake.subMutex.Lock()
	defer fake.subMutex.Unlock()
	fake.SubStub = stub
}

func (fake *FakeTax) SubArgsForCall(i int) (context.Context, float64) {
	fake.subMutex.RLock()
	defer fake.subMutex.RUnlock()
	argsForCall := fake.subArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeTax) SubReturns(result1 float64, result2 error) {
	fake.subMutex.Lock()
	defer fake.subMutex.Unlock()
	fake.SubStub = nil
	fake.subReturns = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeTax) SubReturnsOnCall(i int, result1 float64, result2 error) {
	fake.subMutex.Lock()
	defer fake.subMutex.Unlock()
	fake.SubStub = nil
	if fake.subReturnsOnCall == nil {
		fake.subReturnsOnCall = make(map[int]struct {
			result1 float64
			result2 error
		})
	}
	fake.subReturnsOnCall[i] = struct {
		result1 float64
		result2 error
	}{result1, result2}
}

func (fake *FakeTax) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	fake.subMutex.RLock()
	defer fake.subMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTax) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ services.Tax = new(FakeTax)
